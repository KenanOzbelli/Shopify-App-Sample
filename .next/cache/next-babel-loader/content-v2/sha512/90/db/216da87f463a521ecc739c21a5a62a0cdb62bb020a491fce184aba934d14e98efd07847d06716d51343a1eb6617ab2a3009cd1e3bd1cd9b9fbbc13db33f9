{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/kenanozbelli/Documents/Coding Projects/Sample-embedded-app/components/ResourceList/index.js\",\n    _this = this;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery getProducts($ids: [ID!]){\\n    nodes(ids: $ids){\\n        ... on Product {\\n            title\\n            handle \\n            descriptionHtml\\n            id\\n            images(first:1){\\n                edges{\\n                    node{\\n                        originalSrc\\n                        alText\\n                    }\\n                }\\n            }\\n            variants(first: 1){\\n                edges{\\n                    node{\\n                        price\\n                        id\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport store from '';\nimport { Query } from 'react-apollo';\nimport { Card } from '@shopify/polaris';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nvar ResourceListWithProducts = function ResourceListWithProducts() {\n  return /*#__PURE__*/_jsxDEV(Query, {\n    query: GET_PRODUCTS_BY_ID,\n    variables: {\n      ids: store.get('ids')\n    },\n    children: function children(_ref) {\n      var data = _ref.data,\n          loading = _ref.loading,\n          error = _ref.error;\n      if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 32\n      }, _this);\n      if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 30\n      }, _this);\n      console.log(data);\n      return /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Stuff Here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = ResourceListWithProducts;\nexport default ResourceListWithProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResourceListWithProducts\");","map":{"version":3,"sources":["/Users/kenanozbelli/Documents/Coding Projects/Sample-embedded-app/components/ResourceList/index.js"],"names":["React","gql","store","Query","Card","GET_PRODUCTS_BY_ID","ResourceListWithProducts","ids","get","data","loading","error","message","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAiB,aAAjB;AACA,OAAOC,KAAP,MAAkB,EAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,IAAMC,kBAAkB,GAAGJ,GAAH,mBAAxB;;AA4BA,IAAMK,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,sBAC7B,QAAC,KAAD;AAAO,IAAA,KAAK,EAAED,kBAAd;AAAkC,IAAA,SAAS,EAAE;AAAEE,MAAAA,GAAG,EAAEL,KAAK,CAACM,GAAN,CAAU,KAAV;AAAP,KAA7C;AAAA,cACK,wBAA8B;AAAA,UAA3BC,IAA2B,QAA3BA,IAA2B;AAAA,UAArBC,OAAqB,QAArBA,OAAqB;AAAA,UAAZC,KAAY,QAAZA,KAAY;AAC3B,UAAGD,OAAH,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACZ,UAAGC,KAAH,EAAU,oBAAO;AAAA,kBAAMA,KAAK,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,eAAP;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,0BACI,QAAC,IAAD;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eADJ;AAKH;AAVL;AAAA;AAAA;AAAA;AAAA,WAD6B;AAAA,CAAjC;;KAAMH,wB;AAeN,eAAeA,wBAAf","sourcesContent":["import React from 'react';\nimport gql  from 'graphql-tag';\nimport store from ''\nimport { Query } from 'react-apollo';\nimport { Card } from '@shopify/polaris';\n\nconst GET_PRODUCTS_BY_ID = gql`\nquery getProducts($ids: [ID!]){\n    nodes(ids: $ids){\n        ... on Product {\n            title\n            handle \n            descriptionHtml\n            id\n            images(first:1){\n                edges{\n                    node{\n                        originalSrc\n                        alText\n                    }\n                }\n            }\n            variants(first: 1){\n                edges{\n                    node{\n                        price\n                        id\n                    }\n                }\n            }\n        }\n    }\n}`;\n\nconst ResourceListWithProducts = () => (\n    <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids')}}>\n        {({ data, loading, error }) => {\n            if(loading) return <div>Loading....</div>;\n            if(error) return <div>{error.message}</div>;\n            console.log(data);\n            return(\n                <Card>\n                    <p>Stuff Here</p>\n                </Card>\n            )\n        }}\n    </Query>\n)\n\nexport default ResourceListWithProducts;\n"]},"metadata":{},"sourceType":"module"}